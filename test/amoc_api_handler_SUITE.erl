-module(amoc_api_handler_SUITE).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").
-export([all/0, init_per_testcase/2, end_per_testcase/2]).

-export([test_success/1,
         test_fail/1,
         test_list/1,
         test_start_fail_no_scenario/1,
         test_start_success/1,
         test_load_good/1,
         test_load_compilation_err/1,
         test_ping_nodes/1,
         test_get_test_result/1,
         test_get_tests_results/1,
         test_get_wrong_test_result/1]).

-record(state, {action}).

all() ->
    [test_success,
        test_fail,
        test_list,
        test_start_fail_no_scenario,
        test_start_success,
        test_load_good,
        test_load_compilation_err,
        test_ping_nodes,
        test_get_test_result,
        test_get_tests_results,
        test_get_wrong_test_result
        ].

init_per_testcase(test_load_good, Config) ->
    file:make_dir("scenarios"),
    file:make_dir("ebin"),
    Config;
        
init_per_testcase(test_load_compilation_err, Config) ->
    file:make_dir("scenarios"),
    Config;

init_per_testcase(test_start_success, Config) ->
    file:make_dir("scenarios"),
    file:write_file("scenarios/mongoose_simple.erl", get_scenario(), [write]),
    file:make_dir("ebin"),
    compile:file("scenarios/mongoose_simple.erl",[{outdir,"ebin"}]),
    code:purge(mongoose_simple),
    Config;

init_per_testcase(_, Config) ->
    application:ensure_all_started(inets),
    Config.

end_per_testcase(test_load_good, Config) ->
    file:delete("scenarios/mongoose_simple.erl"),
    file:del_dir("scenarios"),
    file:del_dir("ebin"),
    Config;

end_per_testcase(test_load_compilation_err, Config) ->
    file:del_dir("scenarios"),
    Config;

end_per_testcase(test_start_success, Config) ->
    file:delete("scenarios/mongoose_simple.erl"),
    file:del_dir("scenarios"),
    file:delete("ebin/mongoose_simple.beam"),
    file:del_dir("ebin"),
    code:purge(mongoose_simple),
    Config;

end_per_testcase(_, _Config) ->
    application:stop(inets),
    application:stop(amoc),
    amoc_api:stop().

test_success(_Config) ->
    %% given
    given_applications_started(),
    %% when
    Result = httpc:request("http://localhost:4000/status"),
    {ok, {{_HttpVsn, CodeHttp, _Status}, _, _}} = Result,
    %% then
    ?assertEqual(200, CodeHttp).

test_fail(_Config) ->
    %% given
    given_http_api_started(),
    %% when
    Result = httpc:request("http://localhost:4000/status"),
    {ok, {{_HttpVsn, CodeHttp, _Status}, _, _}} = Result, 
    %% then
    ?assertEqual(503, CodeHttp).


test_list(_Config) ->
    %% given
    given_applications_started(),
    meck:new(file, [unstick, passthrough]),
    Fun = fun(_) -> {ok, ["scenario.erl"]} end,
    meck:expect(file, list_dir, Fun),
    %% when    
    {CodeHttp, JSON} = amoc_api_scenario_handler:process_json(dd,#state{action = list}),
    meck:unload(file),
    [ {AtomB, FilenamesB} ] = jsx:decode(JSON),
    %% then
    ?assertEqual(200, CodeHttp),
    ?assertEqual(<<"scenarios">>, AtomB),
    ?assertEqual(true, is_list(FilenamesB)).
        
test_start_fail_no_scenario(_Config) ->
    %% given
    given_applications_started(),
    Term = [ 
            {<<"scenario">>, <<"no_exist">>},
            {<<"users">>, <<"10">>}
          ],
    %% when
    {CodeHttp, JSON} = amoc_api_scenario_handler:process_json(Term,#state{action = start}),
    %% then
    ?assertEqual(500, CodeHttp),
    ?assertEqual(
                [{<<"error">>, <<"module_not_exists">>}],
                jsx:decode(JSON)).
                  
test_start_success(_Config) ->
    %% given
    given_applications_started(),
    Term = [ 
            {<<"scenario">>, <<"mongoose_simple">>},
            {<<"users">>, 10}
           ],
    meck:new(amoc_dist, [unstick]),
    Fun = fun(_,1,_) -> ok end,
    meck:expect(amoc_dist, do, Fun),
    %% when
    Result = amoc_api_scenario_handler:process_json(Term,#state{action = start}),
    meck:wait(amoc_dist, do, ['mongoose_simple', 1, 10], 1000),
    meck:unload(amoc_dist),
    {CodeHttp,JSON} = Result,
    %% then
    ?assertEqual(200, CodeHttp),
    ?assertEqual(
                [{<<"mongoose_simple">>, << "ok">>}],
                jsx:decode(JSON)).

test_load_good(_Config) ->
    %% given
    given_applications_started(),
    Term = [ 
            {<<"scenario">>, <<"mongoose_simple">>},
            {<<"module_source">>, get_scenario()}
          ],
    %% when
    Result = amoc_api_scenario_handler:process_json(Term,#state{action = load}),
    {CodeHttp,JSON} = Result,
    %% then
    ?assertEqual(200, CodeHttp),
    ?assertEqual(
                [{<<"mongoose_simple">>, <<"loaded">>}],
                jsx:decode(JSON)).

test_load_compilation_err(_Config) ->
    %% given
    given_applications_started(),
    meck:new(file, [unstick, passthrough]),
    Fun1 = fun(_,_) -> {ok, pid} end,
    Fun2 = fun(_) -> ok end,
    meck:expect(file, open, Fun1),
    meck:expect(file, close, Fun2),
    Term = [ 
            {<<"scenario">>, <<"mongoose_simple">>},
            {<<"module_source">>, <<"sth">>}
          ],
    %% when
    Result = amoc_api_scenario_handler:process_json(Term,#state{action = load}),
    meck:unload(file),
    {CodeHttp,JSON} = Result,
    %% then
    ?assertEqual(500, CodeHttp),
    ?assertEqual(
                [{<<"error">>, <<"compilation_error">>}],
                jsx:decode(JSON)).

test_ping_nodes(_Config) ->
    %% given
    given_applications_started(),
    Term = [],
    %% when
    Result = amoc_api_scenario_handler:process_json(Term,#state{action = ping_nodes}),
    {CodeHttp,JSON} = Result,
    [{Answer,List}] = jsx:decode(JSON),
    %% then
    ?assertEqual(200, CodeHttp),
    ?assertEqual(<<"nodes">>, Answer),
    ?assertEqual(true, is_list(List)).


test_get_tests_results(_) ->
    %% given
    meck:new(amoc_test_event, [unstick, passthrough]),
    TestResFun = fun(_, _) -> {ok, [{foo,test_begin}], [{foo, test_begin}]} end,
    meck:expect(amoc_test_event, handle_call, TestResFun),
    given_applications_started(),
    %% when
    Result = httpc:request("http://localhost:4000/test_status"),
    {ok, {{_HttpVsn, CodeHttp, _Status}, _, Body}} = Result,
    meck:unload(amoc_test_event),
    BodyToParse = case erlang:is_bitstring(Body) of
                    true ->
                        Body;
                    false ->
                        erlang:list_to_bitstring(Body)
                  end, 
    [{Key, Value}] = jsx:decode(BodyToParse),
    %% then
    ?assertEqual(test_begin, erlang:binary_to_existing_atom(Value, utf8)),
    ?assertEqual(foo, erlang:binary_to_existing_atom(Key, utf8)),
    ?assertEqual(200,CodeHttp).

test_get_wrong_test_result(_) ->
    %% given
    given_applications_started(),
    %% when
    Result = httpc:request(post,{"http://localhost:4000/test_status", [], "application/json", "{\"name\": \"foo\"}"}, [], []),
    {ok, {{_HttpVsn, CodeHttp, _Status}, _, _}} = Result,
    %% then
    ?assertEqual(500, CodeHttp).
    
test_get_test_result(_) ->
    %% given
    meck:new(amoc_test_event, [unstick, passthrough]),
    TestResFun = fun(_, _) -> {ok, test_crashed, [{foo, test_crashed}]} end,
    meck:expect(amoc_test_event, handle_call, TestResFun),
    given_applications_started(),
    %% when
    Result = httpc:request(post,{"http://localhost:4000/test_status", [], "application/json", "{\"name\": \"foo\"}"}, [], []),
    {ok, {{_HttpVsn, CodeHttp, _Status}, _, Body}} = Result,
    meck:unload(amoc_test_event), 
    BodyToParse = case erlang:is_bitstring(Body) of
                    true ->
                        Body;
                    false ->
                        erlang:list_to_bitstring(Body)
                  end,
    [{Key, Value}] = jsx:decode(BodyToParse),
    %% then
    ?assertEqual(test_crashed, erlang:binary_to_existing_atom(Value, utf8)),
    ?assertEqual(foo, erlang:binary_to_existing_atom(Key, utf8)),
    ?assertEqual(200, CodeHttp).


%% Helpers
given_applications_started() ->
    application:ensure_all_started(amoc).

given_http_api_started() ->
    amoc_api:start_listener().

get_scenario() ->
<<37,37,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,37,37,32,67,111,112,121,114,105,103,104,116,32,50,48,49,53,32,69,114,108,97,110,103,32,83,111,108,117,116,105,111,110,115,32,76,116,100,46,10,37,37,32,76,105,99,101,110,115,101,100,32,117,110,100,101,114,32,116,104,101,32,65,112,97,99,104,101,32,76,105,99,101,110,115,101,44,32,86,101,114,115,105,111,110,32,50,46,48,32,40,115,101,101,32,76,73,67,69,78,83,69,32,102,105,108,101,41,10,37,37,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,45,109,111,100,117,108,101,40,109,111,110,103,111,111,115,101,95,115,105,109,112,108,101,41,46,10,10,45,100,101,102,105,110,101,40,72,79,83,84,44,32,60,60,34,108,111,99,97,108,104,111,115,116,34,62,62,41,46,10,10,45,98,101,104,97,118,105,111,117,114,40,97,109,111,99,95,115,99,101,110,97,114,105,111,41,46,10,10,45,101,120,112,111,114,116,40,91,115,116,97,114,116,47,49,93,41,46,10,45,101,120,112,111,114,116,40,91,105,110,105,116,47,48,93,41,46,10,10,45,116,121,112,101,32,98,105,110,106,105,100,40,41,32,58,58,32,98,105,110,97,114,121,40,41,46,10,10,45,115,112,101,99,32,105,110,105,116,40,41,32,45,62,32,111,107,46,10,105,110,105,116,40,41,32,45,62,10,32,32,32,32,108,97,103,101,114,58,105,110,102,111,40,34,105,110,105,116,32,116,104,101,32,115,99,101,110,97,114,105,111,34,41,44,10,32,32,32,32,111,107,46,10,10,45,115,112,101,99,32,117,115,101,114,95,115,112,101,99,40,98,105,110,97,114,121,40,41,44,32,98,105,110,97,114,121,40,41,44,32,98,105,110,97,114,121,40,41,41,32,45,62,32,101,115,99,97,108,117,115,95,117,115,101,114,115,58,117,115,101,114,95,115,112,101,99,40,41,46,10,117,115,101,114,95,115,112,101,99,40,80,114,111,102,105,108,101,73,100,44,32,88,77,80,80,84,111,107,101,110,44,32,82,101,115,41,32,45,62,10,32,32,32,32,91,32,123,117,115,101,114,110,97,109,101,44,32,80,114,111,102,105,108,101,73,100,125,44,10,32,32,32,32,32,32,123,115,101,114,118,101,114,44,32,63,72,79,83,84,125,44,10,32,32,32,32,32,32,123,104,111,115,116,44,32,60,60,34,49,50,55,46,48,46,48,46,49,34,62,62,125,44,10,32,32,32,32,32,32,123,112,97,115,115,119,111,114,100,44,32,88,77,80,80,84,111,107,101,110,125,44,10,32,32,32,32,32,32,123,99,97,114,98,111,110,115,44,32,102,97,108,115,101,125,44,10,32,32,32,32,32,32,123,115,116,114,101,97,109,95,109,97,110,97,103,101,109,101,110,116,44,32,102,97,108,115,101,125,44,10,32,32,32,32,32,32,123,114,101,115,111,117,114,99,101,44,32,82,101,115,125,10,32,32,32,32,93,46,10,10,45,115,112,101,99,32,109,97,107,101,95,117,115,101,114,95,99,102,103,40,97,109,111,99,95,115,99,101,110,97,114,105,111,58,117,115,101,114,95,105,100,40,41,44,32,98,105,110,97,114,121,40,41,41,32,45,62,32,101,115,99,97,108,117,115,95,117,115,101,114,115,58,117,115,101,114,95,115,112,101,99,40,41,46,10,109,97,107,101,95,117,115,101,114,95,99,102,103,40,71,101,114,105,73,100,44,32,82,41,32,45,62,10,32,32,32,32,66,105,110,73,100,32,61,32,105,110,116,101,103,101,114,95,116,111,95,98,105,110,97,114,121,40,71,101,114,105,73,100,41,44,10,32,32,32,32,80,114,111,102,105,108,101,73,100,32,61,32,60,60,34,117,115,101,114,95,34,44,32,66,105,110,73,100,47,98,105,110,97,114,121,62,62,44,10,32,32,32,32,80,97,115,115,119,111,114,100,32,61,32,60,60,34,112,97,115,115,119,111,114,100,95,34,44,32,66,105,110,73,100,47,98,105,110,97,114,121,62,62,44,10,32,32,32,32,117,115,101,114,95,115,112,101,99,40,80,114,111,102,105,108,101,73,100,44,32,80,97,115,115,119,111,114,100,44,32,82,41,46,10,10,45,115,112,101,99,32,115,116,97,114,116,40,97,109,111,99,95,115,99,101,110,97,114,105,111,58,117,115,101,114,95,105,100,40,41,41,32,45,62,32,97,110,121,40,41,46,10,115,116,97,114,116,40,77,121,73,100,41,32,45,62,10,32,32,32,32,67,102,103,32,61,32,109,97,107,101,95,117,115,101,114,95,99,102,103,40,77,121,73,100,44,32,60,60,34,114,101,115,49,34,62,62,41,44,10,10,32,32,32,32,123,111,107,44,32,67,108,105,101,110,116,44,32,95,44,32,95,125,32,61,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,116,97,114,116,40,67,102,103,41,44,10,10,32,32,32,32,37,37,65,108,108,111,119,32,112,114,101,115,101,110,99,101,32,115,116,97,110,122,97,32,111,110,108,121,10,32,32,32,32,65,108,108,111,119,80,114,101,115,101,110,99,101,32,61,32,102,117,110,32,101,115,99,97,108,117,115,95,112,114,101,100,58,105,115,95,112,114,101,115,101,110,99,101,47,49,44,10,10,32,32,32,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,101,116,95,102,105,108,116,101,114,95,112,114,101,100,105,99,97,116,101,40,67,108,105,101,110,116,44,32,65,108,108,111,119,80,114,101,115,101,110,99,101,41,44,10,32,32,32,32,37,37,68,114,111,112,32,97,108,108,32,115,116,97,110,122,97,115,10,32,32,32,32,37,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,101,116,95,102,105,108,116,101,114,95,112,114,101,100,105,99,97,116,101,40,67,108,105,101,110,116,44,32,110,111,110,101,41,44,10,10,32,32,32,32,115,101,110,100,95,112,114,101,115,101,110,99,101,95,97,118,97,105,108,97,98,108,101,40,67,108,105,101,110,116,41,44,10,32,32,32,32,108,97,103,101,114,58,105,110,102,111,40,34,112,114,101,115,101,110,99,101,32,114,101,115,112,32,126,112,34,44,32,91,101,115,99,97,108,117,115,95,99,108,105,101,110,116,58,119,97,105,116,95,102,111,114,95,115,116,97,110,122,97,40,67,108,105,101,110,116,41,93,41,44,10,32,32,32,32,116,105,109,101,114,58,115,108,101,101,112,40,53,48,48,48,41,44,10,10,32,32,32,32,78,101,105,103,104,98,111,117,114,73,100,115,32,61,32,108,105,115,116,115,58,100,101,108,101,116,101,40,77,121,73,100,44,32,108,105,115,116,115,58,115,101,113,40,109,97,120,40,49,44,77,121,73,100,45,52,41,44,77,121,73,100,43,52,41,41,44,10,32,32,32,32,115,101,110,100,95,109,101,115,115,97,103,101,115,95,109,97,110,121,95,116,105,109,101,115,40,67,108,105,101,110,116,44,32,50,48,48,48,48,44,32,78,101,105,103,104,98,111,117,114,73,100,115,41,44,10,10,32,32,32,32,116,105,109,101,114,58,115,108,101,101,112,40,49,48,42,49,48,48,48,41,44,10,32,32,32,32,115,101,110,100,95,112,114,101,115,101,110,99,101,95,117,110,97,118,97,105,108,97,98,108,101,40,67,108,105,101,110,116,41,44,10,32,32,32,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,116,111,112,40,67,108,105,101,110,116,41,46,10,10,45,115,112,101,99,32,115,101,110,100,95,112,114,101,115,101,110,99,101,95,97,118,97,105,108,97,98,108,101,40,101,115,99,97,108,117,115,58,99,108,105,101,110,116,40,41,41,32,45,62,32,111,107,46,10,115,101,110,100,95,112,114,101,115,101,110,99,101,95,97,118,97,105,108,97,98,108,101,40,67,108,105,101,110,116,41,32,45,62,10,32,32,32,32,80,114,101,115,32,61,32,101,115,99,97,108,117,115,95,115,116,97,110,122,97,58,112,114,101,115,101,110,99,101,40,60,60,34,97,118,97,105,108,97,98,108,101,34,62,62,41,44,10,32,32,32,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,101,110,100,40,67,108,105,101,110,116,44,32,80,114,101,115,41,46,10,10,45,115,112,101,99,32,115,101,110,100,95,112,114,101,115,101,110,99,101,95,117,110,97,118,97,105,108,97,98,108,101,40,101,115,99,97,108,117,115,58,99,108,105,101,110,116,40,41,41,32,45,62,32,111,107,46,10,115,101,110,100,95,112,114,101,115,101,110,99,101,95,117,110,97,118,97,105,108,97,98,108,101,40,67,108,105,101,110,116,41,32,45,62,10,32,32,32,32,80,114,101,115,32,61,32,101,115,99,97,108,117,115,95,115,116,97,110,122,97,58,112,114,101,115,101,110,99,101,40,60,60,34,117,110,97,118,97,105,108,97,98,108,101,34,62,62,41,44,10,32,32,32,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,101,110,100,40,67,108,105,101,110,116,44,32,80,114,101,115,41,46,10,10,45,115,112,101,99,32,115,101,110,100,95,109,101,115,115,97,103,101,115,95,109,97,110,121,95,116,105,109,101,115,40,101,115,99,97,108,117,115,58,99,108,105,101,110,116,40,41,44,32,116,105,109,101,111,117,116,40,41,44,32,91,98,105,110,106,105,100,40,41,93,41,32,45,62,32,111,107,46,10,115,101,110,100,95,109,101,115,115,97,103,101,115,95,109,97,110,121,95,116,105,109,101,115,40,67,108,105,101,110,116,44,32,77,101,115,115,97,103,101,73,110,116,101,114,118,97,108,44,32,78,101,105,103,104,98,111,117,114,73,100,115,41,32,45,62,10,32,32,32,32,83,32,61,32,102,117,110,40,95,41,32,45,62,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,110,100,95,109,101,115,115,97,103,101,115,95,116,111,95,110,101,105,103,104,98,111,114,115,40,67,108,105,101,110,116,44,32,78,101,105,103,104,98,111,117,114,73,100,115,44,32,77,101,115,115,97,103,101,73,110,116,101,114,118,97,108,41,10,32,32,32,32,32,32,32,32,101,110,100,44,10,32,32,32,32,108,105,115,116,115,58,102,111,114,101,97,99,104,40,83,44,32,108,105,115,116,115,58,115,101,113,40,49,44,32,53,41,41,46,10,10,10,45,115,112,101,99,32,115,101,110,100,95,109,101,115,115,97,103,101,115,95,116,111,95,110,101,105,103,104,98,111,114,115,40,101,115,99,97,108,117,115,58,99,108,105,101,110,116,40,41,44,32,91,98,105,110,106,105,100,40,41,93,44,32,116,105,109,101,111,117,116,40,41,41,32,45,62,32,108,105,115,116,40,41,46,10,115,101,110,100,95,109,101,115,115,97,103,101,115,95,116,111,95,110,101,105,103,104,98,111,114,115,40,67,108,105,101,110,116,44,84,97,114,103,101,116,73,100,115,44,32,83,108,101,101,112,84,105,109,101,41,32,45,62,10,32,32,32,32,91,115,101,110,100,95,109,101,115,115,97,103,101,40,67,108,105,101,110,116,44,32,109,97,107,101,95,106,105,100,40,84,97,114,103,101,116,73,100,41,44,32,83,108,101,101,112,84,105,109,101,41,10,32,32,32,32,32,124,124,32,84,97,114,103,101,116,73,100,32,60,45,32,84,97,114,103,101,116,73,100,115,93,46,10,10,45,115,112,101,99,32,115,101,110,100,95,109,101,115,115,97,103,101,40,101,115,99,97,108,117,115,58,99,108,105,101,110,116,40,41,44,32,98,105,110,106,105,100,40,41,44,32,116,105,109,101,111,117,116,40,41,41,32,45,62,32,111,107,46,10,115,101,110,100,95,109,101,115,115,97,103,101,40,67,108,105,101,110,116,44,32,84,111,73,100,44,32,83,108,101,101,112,84,105,109,101,41,32,45,62,10,32,32,32,32,77,115,103,32,61,32,109,97,107,101,95,109,101,115,115,97,103,101,40,84,111,73,100,41,44,10,32,32,32,32,101,115,99,97,108,117,115,95,99,111,110,110,101,99,116,105,111,110,58,115,101,110,100,40,67,108,105,101,110,116,44,32,77,115,103,41,44,10,32,32,32,32,116,105,109,101,114,58,115,108,101,101,112,40,83,108,101,101,112,84,105,109,101,41,46,10,10,45,115,112,101,99,32,109,97,107,101,95,109,101,115,115,97,103,101,40,98,105,110,106,105,100,40,41,41,32,45,62,32,101,120,109,108,58,101,108,101,109,101,110,116,40,41,46,10,109,97,107,101,95,109,101,115,115,97,103,101,40,84,111,73,100,41,32,45,62,10,32,32,32,32,66,111,100,121,32,61,32,60,60,34,104,101,108,108,111,32,115,105,114,44,32,121,111,117,32,97,114,101,32,97,32,103,101,110,116,101,108,109,97,110,32,97,110,100,32,97,32,115,99,104,111,108,97,114,46,34,62,62,44,10,32,32,32,32,73,100,32,61,32,101,115,99,97,108,117,115,95,115,116,97,110,122,97,58,105,100,40,41,44,10,32,32,32,32,101,115,99,97,108,117,115,95,115,116,97,110,122,97,58,115,101,116,95,105,100,40,101,115,99,97,108,117,115,95,115,116,97,110,122,97,58,99,104,97,116,95,116,111,40,84,111,73,100,44,32,66,111,100,121,41,44,32,73,100,41,46,10,10,45,115,112,101,99,32,109,97,107,101,95,106,105,100,40,97,109,111,99,95,115,99,101,110,97,114,105,111,58,117,115,101,114,95,105,100,40,41,41,32,45,62,32,98,105,110,106,105,100,40,41,46,10,109,97,107,101,95,106,105,100,40,73,100,41,32,45,62,10,32,32,32,32,66,105,110,73,110,116,32,61,32,105,110,116,101,103,101,114,95,116,111,95,98,105,110,97,114,121,40,73,100,41,44,10,32,32,32,32,80,114,111,102,105,108,101,73,100,32,61,32,60,60,34,117,115,101,114,95,34,44,32,66,105,110,73,110,116,47,98,105,110,97,114,121,62,62,44,10,32,32,32,32,72,111,115,116,32,61,32,63,72,79,83,84,44,10,32,32,32,32,60,60,32,80,114,111,102,105,108,101,73,100,47,98,105,110,97,114,121,44,32,34,64,34,44,32,72,111,115,116,47,98,105,110,97,114,121,32,62,62,46,10,10>>.
